final notes for now:
- several arrays perform worse in the case of multidimensional arrays, where
an equal sum of elements within a single multidimensional array, likely because the savings 
are not ever greater than 100%, the part not saved (complement % of the savings) 
accumulates with each additional array; however, several arrays do perform significantly better
than a single flat array
- multidimensional arrays perform the best across the board
- in a multidimensional array, if the larger arrays (trees) are first in the structure,
this performs better than the opposite; for example, a tree of [1000][10][10] and of [100][1000][10]
will perform much better than a tree of [10][100][1000], and also than a tree of [100][100][100]
(which contains the same number of elements but spread equally in structure)
- as gawk's hash table structure fills out more and more with arrays of larger size, there is less
and less memory to save, and so the larger the tree, the less memory savings; for a completely flat tree / array,
the savings peak at 41.165% with 500M elements, then fall at a rate of 16.2648% / 250M elements, or 
10e-7*650592% / element - keep in mind however this relationship is completely different depending on the
dimensions of the tree
